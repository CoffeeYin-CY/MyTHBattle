#!/usr/bin/python2
# -*- coding: utf-8 -*-
# Obsoleted, using custom pyglet.font.Font class to render
# Windows sucks.

from struct import unpack

class GBK(object):
    rols = 126
    cols = 191
    @staticmethod
    def to_unicode(rol, col):
        return (chr(rol+0x81) + chr(col+0x40)).decode('gbk')

    @classmethod
    def get_data(cls, rol, col):
        loc = rol * cls.cols + col
        loc *= cls.data_size
        return cls.data[loc:loc+cls.data_size]

class GBK12(GBK):
    filename = 'GBK12'
    with open(filename, 'rb') as f:
        data = buffer(f.read())
    data_size = 24
    box = (12, 12)

    @classmethod
    def format(cls, data):
        l = unpack('>' + 'H'*12, data)
        l = [hex(i+65536)[-4:] for i in l]
        s = '\n'.join(l)
        return s.upper()


class GBK16(GBK):
    filename = 'GBK16'
    with open(filename, 'rb') as f:
        data = buffer(f.read())
    data_size = 32
    box = (16, 16)
    @classmethod
    def format(cls, data):
        l = unpack('>' + 'H'*16, data)
        l = [hex(i+65536)[-4:] for i in l]
        s = '\n'.join(l)
        return s.upper()

class ASC(object):
    rols = 128
    cols = 1
    @staticmethod
    def to_unicode(rol, col):
        return chr(rol)

    @classmethod
    def get_data(cls, rol, col):
        loc = rol
        loc *= cls.data_size
        return cls.data[loc:loc+cls.data_size]

class ASC12(ASC):
    filename = 'ASC12'
    with open(filename, 'rb') as f:
        data = buffer(f.read())
    data_size = 12
    box = (6, 12)
    @staticmethod
    def format(data):
        return '\n'.join(
            hex(ord(i)+256)[-2:].upper()
            for i in data
        )

class ASC16(ASC12):
    filename = 'ASC16'
    with open(filename, 'rb') as f:
        data = buffer(f.read())
    data_size = 16
    box = (8, 16)

for T in (GBK12, GBK16, ASC12, ASC16):

    f = open(T.__name__ + '_DATA.bdf', 'w')

    template = '''STARTCHAR uni%%s
ENCODING %%d
SWIDTH 1000 0
DWIDTH %d 0
BBX %d %d 0 0
BITMAP
%%s
ENDCHAR
    ''' % (T.box[0], T.box[0], T.box[1])

    count = 0
    rst = ''
    for rol in xrange(T.rols):
        for col in xrange(T.cols):
            try:
                ucs = ord(T.to_unicode(rol, col))
                data = T.get_data(rol, col)
                s = template % (hex(ucs+65536)[-4:].upper(), ucs, T.format(data))
                rst+=s
                count += 1
            except UnicodeDecodeError:
                print 'ERR: %d %d' % (rol, col)

    sz = T.box[1]

    f.write('''STARTFONT 2.1
FONT -FontForge-Untitled1-Medium-R-Normal--%d-120-75-75-M-120-ISO10646-1
SIZE %d 75 75
FONTBOUNDINGBOX %d %d -1 -2
COMMENT "Generated by fontforge, http://fontforge.sourceforge.net"
COMMENT "Created by Proton,,, with FontForge 2.0 (http://fontforge.sf.net)"
STARTPROPERTIES 27
FOUNDRY "FontForge"
FAMILY_NAME "Untitled1"
WEIGHT_NAME "Medium"
SLANT "R"
SETWIDTH_NAME "Normal"
ADD_STYLE_NAME ""
PIXEL_SIZE %d
POINT_SIZE 120
RESOLUTION_X 75
RESOLUTION_Y 75
SPACING "M"
AVERAGE_WIDTH 120
CHARSET_REGISTRY "ISO10646"
CHARSET_ENCODING "1"
FONTNAME_REGISTRY ""
CHARSET_COLLECTIONS "ISO10646-1"
FONT_NAME "Untitled1"
FACE_NAME "Untitled1"
FONT_VERSION "001.000"
FONT_ASCENT %d
FONT_DESCENT 0
UNDERLINE_POSITION -1
UNDERLINE_THICKNESS 1
RAW_ASCENT 1000
RAW_DESCENT 0
FIGURE_WIDTH -1
AVG_UPPERCASE_WIDTH 120
ENDPROPERTIES
''' % (sz, sz, sz, sz, sz, sz))

    f.write('CHARS %d\n' % count)
    f.write(rst)
    f.write('ENDFONT\n')
