* [ThisIsClassName]

In a playing game ->

The game is controlled by [GameMode](eg. Game3v3 extends GameMode)

There are [Player]s, represents player, all communication are done through it. [Player]s are generated from [User]s at beginning of the game.

NONONO, [Effect]s *ARE* [Action]s!

[Action] has associated [Card]s, indicating source of the action, some [Action]s may use this.
[Card] has associated [Action], the [Action] is what this card will do.

[Action]
    [UserGeneratedAction]
        [SimpleAction] # attack, graze, and peach, and perhaps... dung
        [SpellCardAction] # instant spell cards
        [DelayedSpellCardAction] # delayed spellcards
        [EquipAction] # for equipments
    [InternalAction]
        [DrawCardsAction]
        [UseCardAction]
        [DropCardsAction]
        [FateTellAction]

[Action]s has apply_action method, call to apply, return value indicates whether it is applied successfully.


Sample pseudo-code, when it's one's turn:

...
p=Player[i]
process_fatetell(xxxx) # pan ding qu .....

emit event ROUND_START(player)

act = p.process_action(action
process_action(act)

emit event ROUND_END(player)

def process_action(act):
    if action_can_do(act):
        act.set_up()
        act = emit_event(ACTION_BEFORE, act)
        if action_can_do(act):
            act.apply_action() # call the [Action]'s callback, logics' are in it.
        emit_event(ACTION_AFTER, act)
        act.clean_up() # some actions may use. eg: DropCardsAction may be intercepted, and cards be replaced, then it can put dropped cards to the DroppedCardsDeck in this function.

class Attack(Action):
    def apply_action(self):
        target = self.get_target()
        if not process_action(actions.UseGraze(player, amount=amount)):
            process_action(Damage(amount=1, target=target))


# Youmu's
class Nitouryuu(EventHandler):
    def process(evt):
        if (#evt is Attack#) and (#evt is from Youmu#):
            evt.amount=2


class Damage(Action):
    def apply_action(self):
        p = self.get_target()
        p.life -= amount
        if p.life <=0:
            p = emit_event(PLAYER_DYING, p)


...

# Effect processing is similar.

---------------------------------

# Use PyPy or Stackless, learn network programming!!!

use gevent! ( chosen over eventlet, stackless )

UI: try this: intercept all actions/effects, and tell [Player]s what to display.

---------------------------------


Server side:

1 main thread + n of cpus worker threads

MainThread:
    handle start up process
    handle all the network io, dispatch messages to worker thread / tasklet

WorkThread(s):
    GameHallTasklet: (only one)
        handle all the users that not in a game.
        eg: track status, start a game
    GameTasklet:
        handle single game logics

well, give up the thread thing... there is no need to do this... at least for now.


--------------------------

gevent:

Player extends User extends Client

Player is in game client
User is in game hall client, handles user info etc
Client is the network conn representation.


class Client:
    has a Queue q, have length, kill client if overflows

    def gevent_loop():
        while True:
            q.put(parse_packet(self.sock))
    def recv_packet:
        return q.get()

    send = self.sock.send


class User(Client):
    userinfo, username, password, etc.

class Player(User):
    ??


----------------------------

server.core: common game logic
server.games: game modes
server.network: network handler
server.utils

client.core
client.ui
client.network
client.utils


--------------------------------

pygame: res -> 1000 * 720 is good


-----------------------------

Client / Server comm:

1) remote object

2) command / event string

------------------

ZODB or other NoSQL DB

-------------------------

communication:

*ALL* data are JSON encoded and in this format:

["command", data]

eg:

["heartbeat", null]
["create_game", "A Dummy Game"]
["whatever", [{"key": "value"}, "asdfasdf", "fdasfdsa"]]


Client <-> GameHall:
active_queue = reception.wait_channel
<client> -> [Receptionist] ( calls GameHall functions )

/*
Client <-> Games:
active_queue = None
[Game] reads, if:
    data is ["gamedata", whatever]:
        if data is expected:
            go normal processing routine
        else:
            drop it
    else:
        send it to player's receptionist
*/

Client <-> Games:
active_queue = receptionist.wiat_channel
[Receptionist] reads, if:
    data is ["gamedata", whatever]:
        put it to player's queue
    else:
        process it

[Game] reads, if
    data is ["gamedata", whatever]:
        if data is expected:
            go normal processing routine
        else:
            drop it
    else:
        oh crap, this is not supposed to happen!


----------------------------

move server.network to network, rename Client to Endpoint
isolate common game logic of server.core.Game to game.Game,

these are usable by client

def server.core.ServerGame(game.Game, Greenlet):
   .....

------------------------------------------------------

Server and clients run same logic, so client know what server expects ->

SERVER:
    process_action(UseGraze(player=xxx,amount=1))
     --> server UseGraze.apply_action waits response

CLIENT:
    process_action(UseGraze(player=xxx,amount=1))
     --> client UseGraze.apply_action tell ui to choose a card and send it to server

-----------------------------------------------------

Client do not handle timeouts of other players,
Server guarantees that client Actions receives correct response.

Server:
if timeout happens, abort current Action, and call it's default_action method.
this method should only be called at server side, and never waits for user input.

-----------------------------------------------------

Graphic:

     -------------------------------------
     |                                   |
     |   --------------   -----------    |
     |   |            |   |         |    |
     |   | [X]  [Y]   |   |  <B>    |    |
     |   |            |   |         |    |
     |   | [Z]  [!]   |   -----------    |
     |   |        <A> | <-     ^         |
     |   --------------  |-----|         |
     |                     sub surface   |
     |                                   |
     |                                   |
     |      <ROOT SURFACE>               |
     |                                   |
     ------------------------------------|

(1) when [X] need repaint

1> some code put [X] into paint queue
2> PaintManager reads the queue, and call appropriate
   method to repaint it, remember invalidated region,
   for pygame.display.update

PaintManager is a dedicated greenlet.

[X] is a subclass of [Widget], and has A as its parent.
[X] has z-index, and coordinates relative to its parent.

(2) repaint <A>

1> put it into paint queue
2> when PaintManager call it's 'paint' method,
   <A> is responsible for painting its childs
   in right order (z-index)

(3) when <A> and [X] appeared in the paint
    queue the same time, [X] will be painted
    twice. PaintManager do not guarantee this
    (removing dupilicate), so don't let it happen.

(4) class Sprite(Widget):
1> PaintManager do not remove [Sprite]s from paint
   queue, they are responsible for removing themselves
   when there work has done.
2> They has a clock begin ticking when PaintManager
   first paint them.
3> They are always painted at last, for performace

How to paint:
1> when something other than [Sprite] paints,
   they are painted both to a seperate surface(let's
   call the surface BG) and to SCREEN. BG has the
   same size of SCREEN.
2> Collect all [Sprite]s need to be painted,
   get all regions [Sprite]s invalidated in last frame,
   restore these regions from BG to SCREEN.
3> paint [Sprite]s, remember invalidated region.

------------------

investigate protobuf

------------------

Client side:
    try:
        with player.galert('goodpersoncard'):
            do your stuff
    except GameDataAlert:
        something happened, abort current ui actions, do with the event.

Server side:
    use gevent.select to monitor read events.


---------------------------------------------------

Exception as an Event:
used to implement 'any time' skills

client used the event, send notification to server,
both side generate an exception, interrupt current operation,
Game.process_action sees the exception and found it a special one,
then call event handlers to handle it

be careful of abuse

-----------------------------

Client core <-> UI messaging

chat / exit / ... ? should be handled by other greenlet, not the game logic one.


game logic:
    when needs user interaction, fires an event acquiring input.

    ui has EventListener to handle these event, send request to ui, wait for complete.
    ui receives the info. when user did the input, complete the request.
    if errors occurred, just signal time-out.
    now game can get result from the Action.

ui intercepts game events, so it can know when core needs user input

----------------------------

player.reveal(card) or this? ->

class Synchronizable(object):
    def show_to(self, player_list): ....

    @abstract
    def parse(self, raw_data): return parsed_object

class SyncInt(int, Synchronizable): pass
SyncInt.parse = SyncInt

.....
